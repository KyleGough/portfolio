// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SortingVisualiser project page renders 1`] = `
<div>
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <h1
      class="project-title"
    >
      Sorting Algorithm Visualiser
    </h1>
    <p
      class="text-link-hover my-4"
    >
      <time
        datetime="2015-09"
      >
        September 2015
      </time>
       
      -
       
      <time
        datetime="2015-11"
      >
        November 2015
      </time>
    </p>
    <p
      class="mb-4 max-w-reading"
    >
      Tool for visualising the sorting process on generated datasets. Supports 20 different sorting algorithms including: Bubble sort, Merge sort, and Quicksort. The tool also has the ability to compare and visualise two sorting algorithms concurrently. The initial dataset can be a choice of 18 configurations such as: random, normally distributed or sawtooth.
    </p>
    <div
      class="flex flex-row flex-wrap items-center mt-8 gap-4"
    >
      <div
        class="text-chip bg-chip-light text-xs px-4 py-0.5 h-8 leading-chip rounded-2xl font-extrabold"
      >
        C#
      </div>
    </div>
  </div>
  <hr
    class="m-8 h-px bg-divider"
  />
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <video
      autoplay=""
      class="border-2 border-white rounded-lg text-center items-center shadow mx-auto"
      controls=""
      loop=""
      src="heap.mp4"
    />
    <p
      class="mt-4 mb-2 text-sm text-center text-light font-thin"
    >
      Heap Sort
    </p>
  </div>
  <hr
    class="m-8 h-px bg-divider"
  />
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <h2
      class="project-header"
    >
      Overview
    </h2>
    <p
      class="my-4 max-w-reading"
    >
      Prior to this project, I had developed a simple CLI sorting algorithm visualiser in VB.net featuring a limited selection of algorithms and options. Once I had familiarised myself with C#, I decided to upgrade and rewrite the visualiser with a GUI, additional algorithms and enhanced customisation. The project served as a great tool for improving my C# and GUI design skills as well as futhering my understanding of how sorting algorithms operate, scale and perform.
    </p>
  </div>
  <hr
    class="m-8 h-px bg-divider"
  />
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <h2
      class="project-header"
    >
      Features
    </h2>
    <ul
      class="project-list"
    >
      <li>
        Real-time visualiser which can be paused and stopped.
      </li>
      <li>
        20 unique sorting algorithms.
      </li>
      <li>
        18 starting datasets to analyse the performance of each algorithm.
      </li>
      <li>
        Ability to compare two algorithms simultaneously.
      </li>
      <li>
        Customisable dataset size, range and delay.
      </li>
      <li>
        Statistics provided for each algorithm (incl. Big-O Complexities, Stability, In-place).
      </li>
      <li>
        Analysis results after sorting data (incl. Comparisons, Swaps, Duration).
      </li>
      <li>
        Custom colours and data display styles.
      </li>
    </ul>
  </div>
  <hr
    class="m-8 h-px bg-divider"
  />
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <h2
      class="project-header"
    >
      Algorithms
    </h2>
    <table
      class="min-w-full"
    >
      <tbody>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bitonic
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Parallel sorting algorithm
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bogo
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Randomly permutates all elements until fully sorted
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bubble
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Common simple algorithm
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Cocktail
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bubble sort in both directions
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Comb
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bubble sort variant with reducing gap
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Cycle
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Optimised for minimal array writes
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Gnome
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Insertion sort variant which swaps until element in correct position
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Heap
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Builds heap and extracts from unsorted region
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Insertion
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Builds sorted array one element at a time
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            JSort
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Builds heap then uses insertion sort
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Merge
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Recursively merges half of the array
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            OddEven
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Compares all odd/even pairs then vice-versa
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Pancake
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Flips array between regions
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Permutation
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Compares every permutation of the array
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Radix LSD
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bucket sorts digits from least significant to most significant
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Selection
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Builds sorted array one element at a time
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Shell
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Bubble sort variant with reducing gap
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Smooth
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Builds heap then extracts largest element
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Stooge
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Recursively sorts first 2/3 then last 2/3
          </td>
        </tr>
        <tr>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Quick
          </td>
          <td
            class="px-6 py-4 whitespace-no-wrap border-b border-divider text-sm leading-5"
          >
            Divide and conquer algorithm that uses a pivot
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <hr
    class="m-8 h-px bg-divider"
  />
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <h2
      class="text-3xl mb-12"
    >
      Screenshots
    </h2>
    <div
      class="grid grid-cols-12 gap-4"
    >
      <figure
        class="col-span-12 md:col-span-6 lg:col-span-4"
      >
        <img
          alt="Unsorted Random Data"
          class="cursor-pointer border-2 border-link hover:border-link-hover"
          loading="lazy"
          src="/img/sorting-algorithm-visualiser1.jpg"
        />
        <figcaption
          class="my-2 text-sm text-center text-light font-thin"
        >
          Unsorted Random Data
        </figcaption>
      </figure>
      <figure
        class="col-span-12 md:col-span-6 lg:col-span-4"
      >
        <img
          alt="Random and sinusoidal datasets"
          class="cursor-pointer border-2 border-link hover:border-link-hover"
          loading="lazy"
          src="/img/sorting-algorithm-visualiser2.jpg"
        />
        <figcaption
          class="my-2 text-sm text-center text-light font-thin"
        >
          Random and sinusoidal datasets
        </figcaption>
      </figure>
      <figure
        class="col-span-12 md:col-span-6 lg:col-span-4"
      >
        <img
          alt="Bitonic sort and sorted dataset"
          class="cursor-pointer border-2 border-link hover:border-link-hover"
          loading="lazy"
          src="/img/sorting-algorithm-visualiser3.jpg"
        />
        <figcaption
          class="my-2 text-sm text-center text-light font-thin"
        >
          Bitonic sort and sorted dataset
        </figcaption>
      </figure>
      <figure
        class="col-span-12 md:col-span-6 lg:col-span-4"
      >
        <img
          alt="Dataset visualised as points"
          class="cursor-pointer border-2 border-link hover:border-link-hover"
          loading="lazy"
          src="/img/sorting-algorithm-visualiser4.jpg"
        />
        <figcaption
          class="my-2 text-sm text-center text-light font-thin"
        >
          Dataset visualised as points
        </figcaption>
      </figure>
      <figure
        class="col-span-12 md:col-span-6 lg:col-span-4"
      >
        <img
          alt="Algorithm information table"
          class="cursor-pointer border-2 border-link hover:border-link-hover"
          loading="lazy"
          src="/img/sorting-algorithm-visualiser5.jpg"
        />
        <figcaption
          class="my-2 text-sm text-center text-light font-thin"
        >
          Algorithm information table
        </figcaption>
      </figure>
    </div>
  </div>
  <hr
    class="m-8 h-px bg-divider"
  />
  <div
    class="first:pt-24 container text-primary py-8 last:pb-16"
  >
    <div
      class="flex justify-between"
    >
      <a
        class="flex items-center fill-disabled text-disabled cursor-not-allowed"
        href="/"
      >
        <svg
          class="w-6 h-6"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0 0h24v24H0V0z"
            fill="none"
            opacity=".87"
          />
          <path
            d="M17.51 3.87L15.73 2.1 5.84 12l9.9 9.9 1.77-1.77L9.38 12l8.13-8.13z"
          />
        </svg>
        <div
          class="text-center ml-4"
        >
          <p
            class="text-sm"
          >
            Previous Project
          </p>
          <p>
            -
          </p>
        </div>
      </a>
      <a
        class="flex items-center fill-link text-link hover:fill-link-hover hover:text-link-hover"
        href="/projects/delivery-route-planner"
      >
        <div
          class="text-center mr-4"
        >
          <p
            class="text-sm"
          >
            Next Project
          </p>
          <p>
            Delivery Route Planner
          </p>
        </div>
        <svg
          class="w-6 h-6"
          enable-background="new 0 0 24 24"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g>
            <path
              d="M0,0h24v24H0V0z"
              fill="none"
            />
          </g>
          <g>
            <polygon
              points="6.23,20.23 8,22 18,12 8,2 6.23,3.77 14.46,12"
            />
          </g>
        </svg>
      </a>
    </div>
  </div>
</div>
`;
